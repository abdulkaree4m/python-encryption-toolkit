

#--------------------------------------------
#alaa
#Abdulkraeem
#alaa
# Muhammed
#  Abdulrahman
# saeed

#------------------------------------- شرح الكود -------------------------------------
# -------------------------------------------------------------------
#                      شرح الخوارزميات المستخدمة
# -------------------------------------------------------------------

# ---------------- Keyless / Railway ---------------- #
# آلية عمل خوارزمية سكة الحديد (Rail Fence Cipher):
# ----------------------------------------------------
# - التشفير:
#   1) يتم توزيع الحروف على عدة أسطر (rails) بطريقة متعرجة (zig-zag).
#   2) بعد توزيع النص، يتم جمع الحروف سطرًا بسطر لتكوين النص المشفر.
#
# - فك التشفير:
#   1) نرسم شبكة من الأسطر والأعمدة ونحدد أماكن الحروف بالرمز '*'.
#   2) نملأ هذه المواقع بالنص المشفر بالترتيب.
#   3) نقرأ الشبكة بنفس طريقة التشفير (zig-zag) لاستعادة النص الأصلي.
#
# مثال (key=3, text="HELLO"):
#   H   L
#   E L O
#   النتيجة: HLELO
# -------------------------------------------------------------------

# ---------------- Caesar (Additive) ---------------- #
# آلية عمل خوارزمية قيصر:
# ----------------------------------------------------
# - الفكرة: إزاحة كل حرف بمقدار (key) معين في الأبجدية.
#   مثلاً: بالحروف الإنجليزية، إذا كان key=3:
#   A → D , B → E , C → F
#
# - الدالة Caesar_algorithm:
#   تقوم بعملية التشفير بتحريك الحروف للأمام.
#
# - الدالة Caesar_algorithm_De:
#   تقوم بعملية فك التشفير بتحريك الحروف للخلف (أي استخدام key سالب).
#
# ملاحظة: الحروف غير الأبجدية (مثل الأرقام والرموز) تبقى كما هي.
# -------------------------------------------------------------------

# ---------------- Multiplicative ---------------- #
# آلية عمل التشفير المضاعف (Multiplicative Cipher):
# ----------------------------------------------------
# - الفكرة: كل حرف يتم تحويله إلى رقم (0-25).
#   ثم يُضرب هذا الرقم في (key) ويُؤخذ باقي القسمة على 26.
#   بعد ذلك يُعاد تحويله إلى حرف.
#
# - هذه الخوارزمية تعتمد على أن يكون key عددًا أوليًا نسبيًا مع 26
#   حتى يمكن فك التشفير (وإيجاد المعكوس الضربي).
#
# مثال: (char='B'=1, key=3) → (1*3 % 26 = 3) → 'D'
# -------------------------------------------------------------------

# ---------------- RC4 ---------------- #
# آلية عمل خوارزمية RC4 (مجرى المفاتيح Stream Cipher):
# ----------------------------------------------------
# - تتكون من مرحلتين رئيسيتين:
#
# 1) KSA (Key Scheduling Algorithm):
#    - تهيئة مصفوفة S بالقيم 0..255.
#    - إعادة ترتيب عناصر S باستخدام المفتاح.
#
# 2) PRGA (Pseudo-Random Generation Algorithm):
#    - توليد مفتاح عشوائي (Keystream) بنفس طول النص.
#    - كل حرف من النص يُعمل له XOR مع بايت من keystream لإنتاج النص المشفر.
#
# - الدالة RC4:
#    تحول المفتاح (key) إلى أعداد، وتشغل KSA و PRGA
#    ثم تُطبق XOR مع النص المدخل (data).
#
# ملاحظة: RC4 تستخدم للتشفير وفك التشفير بنفس الدالة،
# لأن (XOR) عملية قابلة للعكس.
# -------------------------------------------------------------------

# ---------------- RSA ---------------- #
# آلية عمل خوارزمية RSA (تشفير بالمفتاح العام):
# ----------------------------------------------------
# 1) اختيار عددين أوليين p و q.
# 2) حساب n = p * q.
# 3) حساب دالة أويلر: φ(n) = (p-1) * (q-1).
# 4) اختيار عدد e بحيث يكون أوليًا نسبيًا مع φ(n).
# 5) حساب d (المفتاح الخاص) باستخدام المعكوس الضربي لـ e بالنسبة لـ φ(n).
#
# - generate_keys:
#   تنشئ مفاتيح عشوائية (عام وخاص).
#
# - encrypt_rsa:
#   تستخدم المفتاح العام (e, n) لتشفير النص.
#   كل حرف يُحول إلى رقم ثم يُحسب: (char ^ e) mod n.
#
# - decrypt_rsa:
#   تستخدم المفتاح الخاص (d, n) لفك التشفير:
#   (cipher ^ d) mod n → يعيد الحرف الأصلي.
#
# ملاحظة:
# - المفتاح العام (e, n) يوزع للجميع للتشفير.
# - المفتاح الخاص (d, n) يبقى سريًا لفك التشفير.
# -------------------------------------------------------------------
